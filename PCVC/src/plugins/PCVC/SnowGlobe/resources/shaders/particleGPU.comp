#version 430

layout (local_size_x = 100, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 3) buffer share_particles_block { vec4 data[]; };

uniform int lastUsedParticle;
uniform int seed;

const float pi = acos(-1.0);

// Random function: [0, 1]
float random(uint seed) {
    // wang hash
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return float(seed) / 4294967296.0;
}

// Create new particle
vec4 respawnParticle() {
    uint glID = gl_GlobalInvocationID.x;
    uint llID = gl_LocalInvocationID.x;
    vec4 particle;

    particle.x = (random(glID) - 0.5) *4.8;
    particle.y = (random(glID + seed) - 0.5) *4.8;
    particle.z = 2.4f;
    particle.w = 1.0f;

    return particle;
}

void main() {
    uint glID = gl_GlobalInvocationID.x;
    float dt = 0.001f;

    // life <= 0.0f: Add new particles
    if (data[glID].w <= 0.0f) {     
        if(glID < lastUsedParticle) data[glID] = respawnParticle();
    }

    // Update particles
    data[glID].w -= dt;
    if(data[glID].z > 0.01f) data[glID].z -= 3 * dt;
}
